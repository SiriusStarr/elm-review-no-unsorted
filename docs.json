[{"name":"NoUnsortedCases","comment":" Reports case patterns that are not in the \"proper\" order.\n\nðŸ”§ Running with `--fix` will automatically sort the patterns.\n\nThe proper order of custom types is the order in which they are defined in your\nsource files, and the order of other patterns may be specified in the rule\nconfiguration. See the \"Configuration\" section below for more information.\n\n    config =\n        [ NoUnsortedCases.rule NoUnsortedCases.defaults\n        ]\n\n\n## Fail\n\n    type Custom\n        = Foo\n        | Bar\n        | Baz\n\n    func1 c =\n        case c of\n            Bar ->\n                \"bar\"\n\n            Foo ->\n                \"foo\"\n\n            Baz ->\n                \"baz\"\n\n    func2 cs =\n        case cs of\n            [ Bar ] ->\n                \"bar\"\n\n            [ Foo ] ->\n                \"foo\"\n\n            [ Foo, Foo ] ->\n                \"foofoo\"\n\n            [ Baz ] ->\n                \"baz\"\n\n            _ ->\n                \"other\"\n\n    func3 c =\n        case c of\n            Nothing ->\n                \"\"\n\n            Just Bar ->\n                \"bar\"\n\n            Just Foo ->\n                \"foo\"\n\n            Just Baz ->\n                \"baz\"\n\n    func4 c1 c2 =\n        case ( c1, c2 ) of\n            ( Foo, Baz ) ->\n                \"foo baz\"\n\n            ( Foo, Bar ) ->\n                \"foo bar\"\n\n            ( Bar, Foo ) ->\n                \"bar foo\"\n\n            ( Baz, Foo ) ->\n                \"baz foo\"\n\n            _ ->\n                \"other\"\n\n\n## Success\n\n    type Custom\n        = Foo\n        | Bar\n        | Baz\n\n    func1 c =\n        case c of\n            Foo ->\n                \"foo\"\n\n            Bar ->\n                \"bar\"\n\n            Baz ->\n                \"baz\"\n\n    func2 cs =\n        case cs of\n            [ Foo ] ->\n                \"foo\"\n\n            [ Foo, Foo ] ->\n                \"foofoo\"\n\n            [ Bar ] ->\n                \"bar\"\n\n            [ Baz ] ->\n                \"baz\"\n\n            _ ->\n                \"other\"\n\n    func3 c =\n        case c of\n            Just Foo ->\n                \"foo\"\n\n            Just Bar ->\n                \"bar\"\n\n            Just Baz ->\n                \"baz\"\n\n            Nothing ->\n                \"\"\n\n    func4 c1 c2 =\n        case ( c1, c2 ) of\n            ( Foo, Bar ) ->\n                \"foo bar\"\n\n            ( Foo, Baz ) ->\n                \"foo baz\"\n\n            ( Bar, Foo ) ->\n                \"bar foo\"\n\n            ( Baz, Foo ) ->\n                \"baz foo\"\n\n            _ ->\n                \"other\"\n\n\n## When (not) to enable this rule\n\nThis rule is useful when you want to ensure that you pattern match in a\nconsistent, predictable order, that is consistent with the order in which a type\nwas defined, as well as ensuring (optionally) that literal patterns and the like\nare sorted.\n\nThis rule is not useful when you want to be able to write case patterns in\ndifferent orders throughout your codebase, e.g. if you want to emphasize what\npattern is most important at any given point.\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template SiriusStarr/elm-review-no-unsorted/example --rules NoUnsortedCases\n```\n\n\n## Rule\n\n@docs rule\n\n\n## Configuration\n\n@docs RuleConfig, defaults, SortLists, SortTypesFromDependencies\n\n","unions":[{"name":"SortLists","comment":" List patterns may be sorted in one of two ways:\n\n  - `Elementwise` -- Patterns are sorted by comparing elements sequentially at each position (from left to right). This is the same behavior as\n    `List.sort`.\n  - `LengthFirst` -- Shorter patterns always come before longer pattern, with patterns of the same length sorted elementwise at each position.\n\nNote that uncons patterns are considered the length of their matching list, with\nwildcard patterns considered to have infinite length for the purposes of\nsorting. This is necessary to ensure that earlier patterns are not erroneously\nmatched by wildcards.\n\n**Elementwise**\n\n    case list of\n        [] ->\n            \"\"\n\n        [ 1 ] ->\n            \"1\"\n\n        [ 1, 1 ] ->\n            \"11\"\n\n        [ 1, 1, 1 ] ->\n            \"111\"\n\n        [ 1, 2 ] ->\n            \"12\"\n\n        [ 1, 3 ] ->\n            \"13\"\n\n        [ 2 ] ->\n            \"2\"\n\n        [ 2, 1 ] ->\n            \"21\"\n\n        [ 2, 2 ] ->\n            \"22\"\n\n        [ 2, 3 ] ->\n            \"23\"\n\n        [ 3 ] ->\n            \"3\"\n\n        _ ->\n            \"Too many...\"\n\n**LengthFirst**\n\n    case list of\n        [] ->\n            \"\"\n\n        [ 1 ] ->\n            \"1\"\n\n        [ 2 ] ->\n            \"2\"\n\n        [ 3 ] ->\n            \"3\"\n\n        [ 1, 1 ] ->\n            \"11\"\n\n        [ 1, 2 ] ->\n            \"12\"\n\n        [ 1, 3 ] ->\n            \"13\"\n\n        [ 2, 1 ] ->\n            \"21\"\n\n        [ 2, 2 ] ->\n            \"22\"\n\n        [ 2, 3 ] ->\n            \"23\"\n\n        [ 1, 1, 1 ] ->\n            \"111\"\n\n        _ ->\n            \"Too many...\"\n\n","args":[],"cases":[["Elementwise",[]],["LengthFirst",[]]]},{"name":"SortTypesFromDependencies","comment":" Specify how to sort types that are **imported from dependencies**.\n\n  - `DeclarationOrder` -- Sort types in the order they appear in the\n    dependency's source file (or more technically in its documentation); this is\n    identical to the behavior of types those defined within your own modules.\n  - `AlphabeticalOrder` -- Sort types alphabetically.\n  - `DoNotSort` -- Do not sort types from dependencies at all. Note that this\n    will render unsortable any patterns requiring types from dependencies to be\n    sorted.\n\n","args":[],"cases":[["DeclarationOrder",[]],["AlphabeticalOrder",[]],["DoNotSort",[]]]}],"aliases":[{"name":"RuleConfig","comment":" Configure the behavior of the rule.\n\n  - `sortLists` -- How to sort list and uncons patterns. See `SortLists` for\n    details.\n  - `sortLiterals` -- Specify whether to sort literals or not. If literals are\n    not sorted, case expressions that would require sorting literals cannot be\n    sorted and will thus be ignored by the rule.\n  - `sortTypesFromDependencies` -- Specify how to sort custom types imported\n    from dependencies (including `Basics` types like `Maybe` and `Bool`). If\n    such types are not sorted, case expressions that would require sorting such\n    types in cannot be sorted, and will thus be ignored by the rule. See\n    `SortTypesFromDependencies` for details.\n\n","args":[],"type":"{ sortLists : NoUnsortedCases.SortLists, sortLiterals : Basics.Bool, sortTypesFromDependencies : NoUnsortedCases.SortTypesFromDependencies }"}],"values":[{"name":"defaults","comment":" A default configuration, defined as follows:\n\n    { sortLists = Elementwise\n    , sortLiterals = True\n    , sortTypesFromDependencies = DeclarationOrder\n    }\n\nSee the appropriate sections for a description of each option.\n\n","type":"NoUnsortedCases.RuleConfig"},{"name":"rule","comment":" Reports case patterns that are not in the \"proper\" order.\n","type":"NoUnsortedCases.RuleConfig -> Review.Rule.Rule"}],"binops":[]}]